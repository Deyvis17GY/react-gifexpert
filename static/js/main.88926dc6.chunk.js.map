{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GitGridItem.js","components/GitGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","placeholder","type","value","onChange","target","protTypes","propTypes","func","isRequired","getGifs","category","a","url","encodeURI","fetch","resp","json","data","console","log","gifs","map","img","id","title","images","fixed_width_downsampled","GitGridItem","className","src","alt","GitGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","index","ReactDOM","render","document","getElementById"],"mappings":"oNAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACZC,mBAAS,IADG,mBACzCC,EADyC,KAC7BC,EAD6B,KAehD,OACE,sBAAMC,SATa,SAACC,GACpBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GAAD,OAAWP,GAAX,mBAA0BO,OACxCN,EAAc,MAKhB,SACE,uBACEO,YAAY,0BACZC,KAAK,OACLC,MAAOV,EACPW,SAlBoB,SAACR,GACzBF,EAAcE,EAAES,OAAOF,aAuB3Bb,EAAYgB,UAAY,CACtBf,cAAegB,IAAUC,KAAKC,Y,mCC/BnBC,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfC,EADe,iDACiCC,UACpDH,GAFmB,+DAIFI,MAAMF,GAJJ,cAIfG,EAJe,gBAKEA,EAAKC,OALP,uBAKbC,EALa,EAKbA,KACRC,QAAQC,IAAIF,EAAM,QACZG,EAAOH,EAAKI,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXZ,IAAG,UAAEU,EAAIG,cAAN,aAAE,EAAYC,wBAAwBd,QAXxB,kBAcdQ,GAdc,4CAAH,sDCEPO,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOZ,EAAU,EAAVA,IACnC,OACE,sBAAKgB,UAAU,yCAAf,UACE,qBAAKC,IAAKjB,EAAKkB,IAAKN,IACpB,6BAAKA,QCFEO,EAAU,SAAC,GAAkB,IAAhBrB,EAAe,EAAfA,SAAe,ECDb,SAACA,GAAc,IAAD,EACdnB,mBAAS,CACjC0B,KAAM,GACNe,SAAS,IAH6B,mBACjCC,EADiC,KAC1BC,EAD0B,KAUxC,OAJAC,qBAAU,WACR1B,EAAQC,GAAU0B,MAAK,SAACC,GAAD,OAAUH,EAAS,CAAEjB,KAAMoB,EAAML,SAAS,SAChE,CAACtB,IAEGuB,EDR2BK,CAAa5B,GAAjCe,EADyB,EAC/BR,KAAce,EADiB,EACjBA,QAEtB,OACE,qCACE,oBAAIJ,UAAU,2CAAd,SAA0DlB,IACzDsB,GAAW,wCACZ,qBAAKJ,UAAU,YAAf,SACGH,EAAOJ,KAAI,SAACC,GAAD,OACV,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aEKjBgB,MAff,WAAyB,IAAD,EACchD,mBAAS,CAAC,QADxB,mBACfiD,EADe,KACHlD,EADG,KAGtB,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACCkD,EAAWnB,KAAI,SAACX,EAAU+B,GAAX,OACd,cAAC,EAAD,CAAqB/B,SAAUA,GAAjB+B,U,YCNtBC,IAASC,OAAO,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.88926dc6.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport propTypes from \"prop-types\";\n\nexport const AddCategory = ({ setCategories }) => {\n  const [inputValue, setInputValue] = useState(\"\");\n\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (inputValue.trim().length > 2) {\n      setCategories((cats) => [inputValue, ...cats]);\n      setInputValue(\"\");\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        placeholder=\"Busca tu anime favorite\"\n        type=\"text\"\n        value={inputValue}\n        onChange={handleInputChange}\n      />\n    </form>\n  );\n};\n\nAddCategory.protTypes = {\n  setCategories: propTypes.func.isRequired,\n};\n","export const getGifs = async (category) => {\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\n    category\n  )}&limit=10&api_key=hlIXgzXD4Q4aL3shSFsTSGyPzFB4Pt6M`;\n  const resp = await fetch(url);\n  const { data } = await resp.json();\n  console.log(data, \"data\");\n  const gifs = data.map((img) => {\n    return {\n      id: img.id,\n      title: img.title,\n      url: img.images?.fixed_width_downsampled.url,\n    };\n  });\n  return gifs;\n};\n","import React from \"react\";\n\nexport const GitGridItem = ({ title, url }) => {\n  return (\n    <div className=\"card animate__animated animate__fadeIn\">\n      <img src={url} alt={title} />\n      <h3>{title}</h3>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\nimport { GitGridItem } from \"./GitGridItem\";\n\nexport const GitGrid = ({ category }) => {\n  const { data: images, loading } = useFetchGifs(category);\n\n  return (\n    <>\n      <h3 className=\"titulo animate__animated animate__fadeIn\">{category}</h3>\n      {loading && <p>Loading</p>}\n      <div className=\"card-grid\">\n        {images.map((img) => (\n          <GitGridItem key={img.id} {...img} />\n        ))}\n      </div>\n    </>\n  );\n};\n","import { useState, useEffect } from \"react\";\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = (category) => {\n  const [state, setState] = useState({\n    data: [],\n    loading: true,\n  });\n\n  useEffect(() => {\n    getGifs(category).then((imgs) => setState({ data: imgs, loading: false }));\n  }, [category]);\n\n  return state;\n};\n","import React, { Fragment, useState } from \"react\";\nimport { AddCategory } from \"./components/AddCategory\";\nimport { GitGrid } from \"./components/GitGrid\";\nfunction GifExpertApp() {\n  const [categories, setCategories] = useState([\"vue\"]);\n\n  return (\n    <>\n      <h2>GifExpertApp</h2>\n      <AddCategory setCategories={setCategories} />\n      <hr />\n      {categories.map((category, index) => (\n        <GitGrid key={index} category={category} />\n      ))}\n    </>\n  );\n}\n\nexport default GifExpertApp;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport GifExpertApp from \"./GifExpertApp\";\nimport \"./index.css\";\nimport \"animate.css\";\n\nReactDOM.render(<GifExpertApp />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals;\n"],"sourceRoot":""}